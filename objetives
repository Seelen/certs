---
Understand and use essential tools
---

Access a shell prompt and issue commands with correct syntax
  
  
  Use input-output redirection (>, >>, |, 2>, etc.)
  
    1	 pgm >    file Output of pgm is redirected to file
    2  pgm <    file Program pgm reads its input from file
    3  pgm >>   file Output of pgm is appended to file
    4	 n >      file Output from stream with descriptor n redirected to file
    5	 n >>     file Output from stream with descriptor n appended to file
    6  n >& m   Merges output from stream n with stream m
    7  n <& m   Merges input from stream n with stream m
    8  << tag   Standard input comes from here through next tag at the start of line
    9	  |       Takes output from one program, or process, and sends it to another
  
  Use grep and regular expressions to analyze text
     
    https://www.digitalocean.com/community/tutorials/using-grep-regular-expressions-to-search-for-text-patterns-in-linux
   
  Access remote systems using SSH
    
    # ssh user@domain
    
  Log in and switch users in multiuser targets
  
    # runlevel
    # systemctl list-units -t target -a
    # systemctl enable graphical.target --force    
    
  Archive, compress, unpack, and uncompress files using tar, star, gzip, and bzip2
    
    https://www.certdepot.net/sys-archive-compress-unpack-and-uncompress-files/
  
  Create and edit text files
  
    #touch file
    #vim/nano file
  
  Create, delete, copy, and move files and directories
    
    # rm -f file
    # cp file /to/directory/
    # mv file /to/directory/
    
    # mkdir directory
    # rm -rf directory
    # cp -rf directory
    # mv directory /to/directory1
  
  Create hard and soft links
  
    # ln /root/test /root/hardlink (if main is deltede the file still works)
    # ln -s /root/hardlink /root/softlink (is a direct access, if the main file is deleted the links doesnt work)
  
  List, set, and change standard ugo/rwx permissions
    
    # ls -la
    # chmod 
  
  Locate, read, and use system documentation including man, info, and files in /usr/share/doc
  
    # mandb
    # apropos
    # man -K text 

---
Operate running systems
---

  Boot, reboot, and shut down a system normally

    # reboot
    # halt -p

  Boot systems into different targets manually
    
    # vim /etc/inittab ---> for help about targets
    # systemctl set-default TARGET.target ---> to set default target 
        
        rescue: to move to single user mode/maintenance level with mounted local file systems,
        emergency: to move to single user mode/maintenance with only /root mounted file system,
        isolate multi-user.target: to move to multi-user level without graphical interface (equivalent to previous run level 3),
        sisolate graphical.target: to move to multi-user level with graphical interface (equivalent to previous run level 5),
        set-default graphical.target: to set the default run level to multi-user graphical mode,
        get-default: to get the default run level.    
     
     # systemd.unit=graphical.target ---> In the grub menu to set target by default at boot
    
  Interrupt the boot process in order to gain access to a system (Reset root password)
  
    ---> edit into grub with 'e'
    ---> add after quiet rd.break into the linux line
    # mount -o remount,rw /sysroot
    # chroot /sysroot
    # su -
    # passwd
    # touch /.autorelabel
    # exit
    # exit
    # logout
    
  Identify CPU/memory intensive processes and kill processes
    
    # top
    
  Adjust process scheduling

    # chrt -(priority) -p(0-99) process
    # chrt -p process --->to show
    
    # tuned --> maibe 
   
  Locate and interpret system log files and journals
  
    System log files are stored in /var/log as with most applications.  SELINUX log in 
    /var/log/audit/audit.log
    SystemD application has been added to allow us to analyse the boot process.
   
    # systemd-analyze  ---> To get the boot process duration
    # systemd-analyze blame --->To get the time spent by each task during the boot process
    # journalctl ---> To view the log:
    # journalctl /sbin/crond  ---> To get all the events related to the crond process in the journal
    # journalctl -b  ---> To get all the events since the last boot
    # journalctl -p err ---> To get all the events with a syslog priority of err
    # journalctl -f  ---> To get the 10 last events and wait for any new one (like tail -f /var/log/messages)
  
  Preserve system journals
    
    # mkdir /var/log/journal
    # vim /etc/systemd/journald.conf ---> enable auto
    # systemctl restart systemd-journald
    
  Start, stop, and check the status of network services
  
    # systemctl start|stop|restart|status service
    
    # systemctl mask sshd  ---> Masking a service prevents it from starting even if it is socket-activated or dbus-activated.
    # systemctl unmask sshd  ---> To enable the service again:

    
  Securely transfer files between systems

    # sftp user@ip.add.re.ss ---> then use cd, put, get
    
    # scp /home/SomeUser/* user@ip.add.re.ss:/tmp   --->To transfer all files from a specified directory (here /tmp) 

---
Configure local storage
---

  List, create, delete partitions on MBR and GPT disks
    
    # fdisk -l
    # fdisk ---> to create and modify
    # partprobe
    # blkid ---> to show UUID mapper
    
    # lsblk
    
  Create and remove physical volumes
    
    # fdisk
    
  Assign physical volumes to volume groups
    
    # vgdisplay 
    # vgcreate GroupName /dev/device
    # vgdisplay 
 
  Create and delete logical volumes
  
    # lvcreate -L 500MB -n VolumeName GroupName
    # lsblk 
    # mkfs.xfs /dev/mapper/GroupName-VolumeName 
  
  Configure systems to mount file systems at boot by universally unique ID (UUID) or label
     # mkdir /mnt/Directory/
     # ls /mnt
     # blkid  ---> to get the UUID
     # vim /etc/fstab --> Add this line
            UUID=252a647d-fc5a-495a-bfd8-46d1bb8ad17f /mnt/Directory                  xfs     defaults        0 0
     # mount -a

  Add new partitions and logical volumes, and swap to a system non-destructively
     
     # fdisk ---> to create a new swap partition (type 82)
     # mkswap /dev/NewSwapPartition  ---> to format
     # swapon /dev/NewSwapPartition  ---> to mount
     # vim /etc/fstab --> Add this line
            /dev/NewSwapPartition swap                    swap    defaults        0 0
     # mount -a

---
Create and configure file systems
---

  Create, mount, unmount, and use vfat, ext4, and xfs file systems
    
    # mount
    # mkfs.ext4 /dev/DeviceToFormat  ---> change ext4 to xfs or vfat for xfs or vfat format
    # umount
    
  Mount and unmount network file systems using NFS
  
    # sudo dnf -y install nfs-utils  ---> For the server
    # mount -t nfs -o options server:/remote/export /local/directory
    # vim /etc/fstab --> Add this line
            host:/remote/export  /local/directory   nfs defaults   0 0
    
  Extend existing logical volumes
  
    # lvextend -L +500 /dev/vgprac/lvprac /dev/sdb1
    
  Create and configure set-GID directories for collaboration
    
    # mkdir /home/shared
    # chown nobody:team /home/shared
    # chmod g+ws,o-rwx /home/shared
   Create the two users and assign them the team group in addition to their own group:
    # useradd -G team user01
    # useradd -G team user02
    # chmod +t /home/shared  ---> If you want the team group members to be able to see each otherâ€™s files but not to delete them, type:
      
  Configure disk compression
  
    # vdo create --name vdo_vol --device=/dev/vda
    # mkfs.xfs -K /dev/mapper/vdo_vol
    # mkdir /vdo_vol 
    # mount -o discard /dev/mapper/vdo_vol /vdo_vol
    # lsblk
    # vdostats
  
  Manage layered storage
    
    https://www.linuxsysadmins.com/stratis-to-create-layered-storage-in-redhat-enterprise-linux-8/
    
  Diagnose and correct file permission problems
    
    #ls -la
    https://greplog.com/rhcsa/rhsca-objective04-06-diagnose-and-correct-file-permission-problems/

---
Deploy, configure, and maintain systems
---

  Schedule tasks using at and cron
    
    https://tecadmin.net/crontab-in-linux-with-20-examples-of-cron-schedule/
  
  Start and stop services and configure services to start automatically at boot
    
    https://www.thegeekdiary.com/centos-rhel-7-beginners-guide-to-systemd-service-units/
  
  Configure systems to boot into a specific target automatically
  
    # systemctl set-default multi-user.target -->Console
    # systemctl set-default graphical.target --> Graphical
    # systemctl get-default --> Check current type
    
    https://www.thegeekdiary.com/rhel-centos-7-how-to-set-default-target-replaced-runlevel/

    ------------------------
    Root Recovery
    ------------------------
      edit into grub with 'e'
      ad after quiet rd.break into the linux line
      # mount -o remount,rw /sysroot
      # chroot /sysroot
      # su -
      # passwd
      # touch /.autorelabel
      # exit
      # exit
      # logout
    ------------------------
  
  Configure time service clients
  
    # dnf install chrony
    # systemctl start chronyd
    # systemctl enable chronyd
    # vim /etc/chrony.conf  ---> to add servers
    # systemctl start chronyd
    # chronyc tracking ---> to check
  
  Install and update software packages from Red Hat Network, a remote repository, or from the local file system
    
    # createrepo
    # dnf update
    # dnf upgrade
    # dnf install "package"
  
  Work with package module streams
  
    # dnf module list
    # dnf module info ModuleName
    # dnf module info --profile ModuleName:(Stream Number)
    # dnf install @ModuleName ---> with module active 
    https://www.youtube.com/watch?v=tjhTzVsFxl8
    
  Modify the system bootloader
  
    # vim /etc/default/grub
    # vim /etc/default/grub ---> to see variables
    # grub2-mkconfig -o /boot/grub2/grub.cfg

---
Manage basic networking
---

  Configure IPv4 and IPv6 addresses
  
    # nmcli
    # nmtui ---> hostname and interfaces
  
  Configure hostname resolution
  
    # hostnamectl status
    # hostnamectl set-hostname name
  
  Configure network services to start automatically at boot
  
    # systemctl enable service
    
  Restrict network access using firewall-cmd/firewall
  
    # firewall-cmd --remove-service=cockpit --permanent
    # firewall-cmd --remove-service=dhcpv6-client --permanent
    # sudo firewall-cmd --reload
    
    # firewall-cmd --zone=public --add-service=https --permanent
    # firewall-cmd --reload
    # firewall-cmd --list-services
    
    # firewall-cmd --get-services
        

---
Manage users and groups
---
  
  Create, delete, and modify local user accounts
  
    # useradd
    # groupadd
  
  Change passwords and adjust password aging for local user accounts
  
    # passwd user
    # chage -M 60 user ---> change password expire
    
    ----
    Length of password
    -----
        # vim /etc/security/pwquality.conf  --> uncoment minlen=8 OR
        # authconfig --passminlen=8 --update
  
  Create, delete, and modify local groups and group memberships
        
    # groupadd accounting 
    # groupadd marketing
    # useradd phil -G accounting 
    # useradd laura -G accounting 
    # useradd steward -G marketing 
    # useradd kevin -G marketing 
    # touch /home/{phil,laura,steward,kevin}/Welcome
    # chage -M 60 phil ---> change password expire
    # chage -M 60 laura
    # chage -M 60 steward
    # chage -M 60 kevin
    # chage -l phil --- >to check
  
  Configure superuser access
        
    # usermod -aG wheel USERNAME
    # visudo
     
---
Manage security
---
  
  Configure firewall settings using firewall-cmd/firewalld
  
    https://www.cyberciti.biz/faq/configure-set-up-a-firewall-using-firewalld-on-rhel-8/
    
  Configure key-based authentication for SSH
    
    As the user
    $ ssh-keygen -b 2048 -t rsa
    $ ssh-copy-id -i .ssh/id_rsa.pub user01@server2.example.com
    On the server2, edit the /etc/ssh/sshd_config file and set the following options:
    # vim /etc/ssh/sshd_config
        PasswordAuthentication no
        PubkeyAuthentication yes
    # systemctl restart sshd
    $ ssh server2.example.com ---> for connect
      
    
  Set enforcing and permissive modes for SELinux
  
    # vim /etc/sysconfig/selinux  ---> change to enforcing
    # reboot  ---> and wait ... a long
    # getenforce
    # setenforce permissive/disable  ---> if you need to change it 
  
  List and identify SELinux file and process context
    
    # ls -laZ
    
  Restore default file contexts
  
    # restorecon -R /path
  
  Use boolean settings to modify system SELinux settings
  
    # getsebool -a | grep http
    # setsebool -P http_home_dir on 
  
  Diagnose and address routine SELinux policy violations
  
    # tail -f /var/log/audit/audit.log
